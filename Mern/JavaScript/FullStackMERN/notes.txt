Server Setup:

Create a new project folder (mkdir project name)
Create Server folder    (mkdir server)
Navigate to server folder and create server.js file (touch server.js)
Create a package.json (refered to as "new project" on platform?) (npm init -y)
Install express (npm install express)
Install mongoose(npm install mongoose)
Add the following code to the server.js file:

    const express = require('express');
    const cors = require('cors')
    const app = express();
    const port = 8000;

    app.use(cors())

    require('./routes/person.routes')(app); 

    app.listen(port, () => console.log(`Listening on port: ${port}`) );


Create congif (mkdir config), controllers (mkdir controllers), models (mkdir models), and routes (mkdir routes) folders

Cient (React) Side Setup: 

Go to project root folder from step one and use (npx create-react-app client)
Create components folder in src folder 

Set up routes file
Set up Server File 


Once back end and front end folder strucutres are set up, (npm run start) in client folder then (npm intsall cors) in server folder before starting server (nodemon server.js) 


*** At some point you'll have to install react-router-dom (npm install react-router-dom)

Red: All features required in under 5 hours
CRUD: Display all of the pets currently available to be adopted.
CRUD: Users can add pets to be put up for adoption (user can create pets)
CRUD: A pet details page exists that displays information about that pet 
CRUD: Users can update the information about a pet 
CRUD: Users can adopt a pet which will remove it from the database 
Validations: pet name, pet type, and pet description are all required and must be 3 characters or longer 
Validations: Pets may have between 0 and 3 skills 
Validations: Display back end error messages 
Backend Validations: Error messages are user created and not the mongoose default 
HTML & CSS: Must reflect the wireframe to at least 75% accuracy
Black: 2 features in 5 hours + Deployment in 24 hours from submission
Deployed on Amazon EC2.
Socket.io - when a pet is adopted, remove it from the table for all users viewing the dashboard
Sort the pets in the shelter by type
Include a button to like a pet, disable it when clicked until the component reloads
Apply validations when updating
Ensure that pet name is unique when adding it to the database (using unique alone is not enough you need to be able to show error messages on the frontend, Research)
